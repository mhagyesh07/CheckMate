# Render-optimized single container Dockerfile
FROM node:18-alpine

# Install system dependencies
RUN apk add --no-cache \
    nginx \
    supervisor \
    curl \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy package files and install dependencies
COPY package*.json ./
COPY client/package*.json ./client/

# Install backend dependencies
RUN npm ci --only=production

# Install client dependencies and build
WORKDIR /app/client
RUN npm ci && npm run build

# Go back to app root
WORKDIR /app

# Copy application source
COPY . .

# Create necessary directories
RUN mkdir -p /var/www/html /var/log/nginx /var/log/nodejs /var/log/supervisor /app/logs

# Copy built React app to nginx directory
RUN cp -r client/build/* /var/www/html/

# Create nginx configuration template
RUN cat > /etc/nginx/conf.d/default.conf.template << 'EOF'
server {
    listen ${NGINX_PORT};
    server_name localhost;
    root /var/www/html;
    index index.html;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Static files with long-term caching
    location /static/ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri =404;
    }

    # API routes to backend
    location /api/ {
        proxy_pass http://127.0.0.1:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
    }

    # Socket.IO WebSocket connections
    location /socket.io/ {
        proxy_pass http://127.0.0.1:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 86400;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
    }

    # React app - serve index.html for all other routes (SPA routing)
    location / {
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
EOF

# Create supervisor configuration
RUN cat > /etc/supervisor/conf.d/supervisord.conf << 'EOF'
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid
childlogdir=/var/log/supervisor
loglevel=info

[program:nginx]
command=nginx -g "daemon off;"
autostart=true
autorestart=true
priority=10
stderr_logfile=/var/log/nginx/error.log
stdout_logfile=/var/log/nginx/access.log
stderr_logfile_maxbytes=10MB
stdout_logfile_maxbytes=10MB
stderr_logfile_backups=3
stdout_logfile_backups=3

[program:nodejs]
command=node app.js
directory=/app
autostart=true
autorestart=true
priority=20
environment=NODE_ENV=production,BACKEND_PORT=3001
stderr_logfile=/var/log/nodejs/error.log
stdout_logfile=/var/log/nodejs/access.log
stderr_logfile_maxbytes=10MB
stdout_logfile_maxbytes=10MB
stderr_logfile_backups=3
stdout_logfile_backups=3
user=root
stopwaitsecs=10
EOF

# Create the startup script that handles Render's dynamic PORT
RUN cat > /start.sh << 'EOF'
#!/bin/sh

# Get the port from Render's environment variable
RENDER_PORT=${PORT:-10000}
BACKEND_PORT=3001

echo "=== Chess Game Container Starting ==="
echo "Render assigned port: $RENDER_PORT"
echo "Backend internal port: $BACKEND_PORT"
echo "Node.js version: $(node --version)"
echo "Nginx version: $(nginx -v 2>&1)"

# Set environment variables for the backend
export PORT=$BACKEND_PORT
export BACKEND_PORT=$BACKEND_PORT
export NODE_ENV=${NODE_ENV:-production}

# Generate nginx config from template with the correct port
export NGINX_PORT=$RENDER_PORT
envsubst '${NGINX_PORT}' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf

# Test nginx configuration
nginx -t
if [ $? -ne 0 ]; then
    echo "ERROR: Nginx configuration test failed"
    exit 1
fi

echo "Nginx will listen on port: $RENDER_PORT"
echo "Backend will run on port: $BACKEND_PORT"
echo "Starting services with supervisor..."

# Start supervisor which manages both nginx and nodejs
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
EOF

RUN chmod +x /start.sh

# Create health check script
RUN cat > /health.sh << 'EOF'
#!/bin/sh
RENDER_PORT=${PORT:-10000}

# Check if nginx is responding
if ! curl -f -s http://localhost:$RENDER_PORT/health > /dev/null; then
    echo "Health check failed: nginx not responding on port $RENDER_PORT"
    exit 1
fi

# Check if backend API is responding
if ! curl -f -s http://localhost:$RENDER_PORT/api/health > /dev/null; then
    echo "Health check failed: backend API not responding"
    exit 1
fi

echo "Health check passed"
exit 0
EOF

RUN chmod +x /health.sh

# Create non-root user for security (though supervisor runs as root for nginx)
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Set proper permissions
RUN chown -R nodejs:nodejs /app/logs
RUN chmod -R 755 /var/log/nginx /var/log/nodejs /var/log/supervisor

# Expose the port (Render will override this with PORT env var)
EXPOSE 10000

# Health check for Docker
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD /health.sh

# Start the application
CMD ["/start.sh"]