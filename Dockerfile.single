# Single container with frontend + backend
FROM node:18-alpine

# Install system dependencies
RUN apk add --no-cache \
    nginx \
    supervisor \
    curl \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY client/package*.json ./client/

# Install all dependencies
RUN npm install
WORKDIR /app/client
RUN npm install

# Copy source code
WORKDIR /app
COPY . .

# Build React frontend
WORKDIR /app/client
RUN npm run build

# Go back to app root
WORKDIR /app

# Create directories
RUN mkdir -p /var/www/html /var/log/nginx /var/log/nodejs /var/log/supervisor /app/logs

# Copy built React app to nginx serve directory
RUN cp -r client/build/* /var/www/html/

# Create nginx configuration
RUN cat > /etc/nginx/conf.d/default.conf << 'EOF'
server {
    listen 80;
    server_name localhost;
    root /var/www/html;
    index index.html;

    # Gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Static files with caching
    location /static/ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # API routes to backend
    location /api/ {
        proxy_pass http://127.0.0.1:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
    }

    # Socket.IO
    location /socket.io/ {
        proxy_pass http://127.0.0.1:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 86400;
    }

    # React app - serve index.html for all routes
    location / {
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache";
    }
}
EOF

# Create supervisor configuration
RUN cat > /etc/supervisor/conf.d/supervisord.conf << 'EOF'
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid
childlogdir=/var/log/supervisor

[program:nginx]
command=nginx -g "daemon off;"
autostart=true
autorestart=true
priority=10
stderr_logfile=/var/log/nginx/error.log
stdout_logfile=/var/log/nginx/access.log
stderr_logfile_maxbytes=10MB
stdout_logfile_maxbytes=10MB

[program:nodejs]
command=node app.js
directory=/app
autostart=true
autorestart=true
priority=20
environment=NODE_ENV=production,BACKEND_PORT=3001,PORT=3001
stderr_logfile=/var/log/nodejs/error.log
stdout_logfile=/var/log/nodejs/access.log
stderr_logfile_maxbytes=10MB
stdout_logfile_maxbytes=10MB
user=root
EOF

# Create startup script
RUN cat > /start.sh << 'EOF'
#!/bin/sh

# Get the port from environment (Render sets this)
EXTERNAL_PORT=${PORT:-80}

echo "Starting services..."
echo "External port: $EXTERNAL_PORT"
echo "Backend port: 3001"

# Update nginx to listen on the correct port
sed -i "s/listen 80;/listen $EXTERNAL_PORT;/" /etc/nginx/conf.d/default.conf

# Set backend port for Node.js
export PORT=3001
export BACKEND_PORT=3001

# Start supervisor (manages nginx + nodejs)
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
EOF

RUN chmod +x /start.sh

# Create a simple health check script
RUN cat > /health.sh << 'EOF'
#!/bin/sh
EXTERNAL_PORT=${PORT:-80}
curl -f http://localhost:$EXTERNAL_PORT/api/health || exit 1
EOF

RUN chmod +x /health.sh

# Expose port
EXPOSE $PORT

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=20s --retries=3 \
  CMD /health.sh

# Start the application
CMD ["/start.sh"]